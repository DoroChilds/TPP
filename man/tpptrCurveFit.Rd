% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/tpptrCurveFit.R
\name{tpptrCurveFit}
\alias{tpptrCurveFit}
\title{Fit melting curves to all proteins in a dataset.}
\usage{
tpptrCurveFit(data, resultPath = NULL, ggplotTheme = tppDefaultTheme(),
  doPlot = TRUE, startPars = c(Pl = 0, a = 550, b = 10),
  maxAttempts = 500, nCores = "max")
}
\arguments{
\item{data}{list of \code{ExpressionSet}s with protein fold changes for curve fitting.}

\item{resultPath}{location where to store the melting curve plots.}

\item{ggplotTheme}{ggplot theme for melting curve plots.}

\item{doPlot}{boolan value indicating whether melting curves should
be plotted, or whether just the curve parameters should be returned.}

\item{startPars}{start values for the melting curve parameters. Will be passed
to function \code{\link{nls}} for curve fitting.}

\item{maxAttempts}{maximal number of curve fitting attempts if model does not converge.}

\item{nCores}{either a numerical value given the desired number of CPUs, or 'max'
to automatically assign the maximum possible number (default).}
}
\value{
A list of ExpressionSets storing the data together with the melting
  curve parameters for each treatment condition and biological replicate.
  Each ExpressionSet contains the measured fold changes, as well as row and
  column metadata. In each ExpressionSet \code{S}, the fold changes can be
  accessed by \code{exprs(S)}. Protein expNames can be accessed by
  \code{featureNames(S)}. TMT labels and the corresponding temperatures are
  returned by \code{S$labels} and \code{S$temperatures}.
}
\description{
Fit melting curves to all proteins in a dataset.
}
\details{
If the melting curve fitting procedure does not converge, it will be
  repeatedly started from perturbed starting parameters (maximum iterations
  defined by argument \code{maxAttempts})
}
\examples{
data(hdacTR_smallExample)
tpptrData <- tpptrImport(configTable=hdacTR_config, data=hdacTR_data)
tpptrNorm <- tpptrNormalize(data=tpptrData, normReqs=tpptrDefaultNormReqs())
normalizedData <- tpptrNorm$normData
hdacSubsets <- lapply(normalizedData,
                      function(d) d[grepl("HDAC", featureNames(d))])
tpptrFittedHDACs <- tpptrCurveFit(hdacSubsets, nCores=1)
}
\seealso{
\code{\link{tppDefaultTheme}}
}

